{"version":3,"sources":["../../src/driver/spanner/SpannerDDLTransformer.ts"],"names":[],"mappings":";;;AAcC,CAAC;AAUD,CAAC;AAEF;IASI,+BAAY,mBAA2C;QACnD,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IACD,yCAAS,GAAT,UAAU,GAAQ,EAAE,aAAyC;QACzD,IAAM,GAAG,GAA2B,IAAI,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAChF,CAAC;IACD,SAAS;IACC,+CAAe,GAAzB,UAA0B,aAAyC,EAAE,IAAY,EAAE,KAAa;QAC5F,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC;QAClD,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAClC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAA;SACvC;QACD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,GAAG;YACnC,IAAI,MAAA,EAAE,KAAK,OAAA;SACd,CAAC;IACN,CAAC;IACS,+CAAe,GAAzB,UAA0B,MAAc;QACpC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;IAC/B,CAAC;IACS,8CAAc,GAAxB,UAAyB,KAAa;QAClC,IAAI,CAAC,WAAW,GAAG,SAAO,KAAO,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;IAClC,CAAC;IAED,mBAAmB;IACnB,iBAAiB;IACjB,0BAA0B;IAChB,qDAAqB,GAA/B,UAAgC,GAAQ,EAAE,aAAyC;QAC/E,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC;QAC7B,OAAO,kBAAgB,GAAG,CAAC,KAAK,MAAG;aAC/B,MAAI,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,MAAG,CAAA;aAC7E,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,aAAa,CAAC,MAAG,CAAA;aACnE,IAAI,CAAC,0BAA0B,EAAE,MAAG,CAAA;aACvC,KAAG,IAAI,CAAC,sBAAsB,EAAI,CAAA,CAAC;IAC3C,CAAC;IACS,iEAAiC,GAA3C,UAA4C,GAAQ,EAAE,aAAyC;QAA/F,iBAEC;QADG,OAAO,KAAG,GAAG,CAAC,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,KAAI,CAAC,gCAAgC,CAAC,CAAC,CAAC,GAAG,EAAE,aAAa,CAAC,EAA3D,CAA2D,CAAC,CAAC,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IACtI,CAAC;IACS,gEAAgC,GAA1C,UAA2C,GAAQ,EAAE,aAAyC;QAC1F,IAAI,GAAG,CAAC,MAAM,EAAE;YACZ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtC,OAAU,GAAG,CAAC,MAAM,CAAC,IAAI,SAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,MAAG;iBACnF,KAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,aAAa,CAAG,CAAA,CAAC;SACrF;aAAM,IAAI,GAAG,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB;iBAC9C,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAM;gBACtC,OAAO;oBACH,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM;oBAClB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI;iBACnB,CAAA;YACL,CAAC,CAAC,CAAC,CAAC;SACP;aAAM,IAAI,GAAG,CAAC,KAAK,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,EAAC,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC;SAChF;aAAM,IAAI,GAAG,CAAC,SAAS,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,EAAC,MAAM,EAAC,IAAI,EAAE,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC;SACnF;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IACS,6CAAa,GAAvB,UAAwB,GAAQ,EAAE,aAAyC;QAA3E,iBAGC;QAFG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC;QAC7B,OAAO,KAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,aAAa,CAAC,EAA7C,CAA6C,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IACtG,CAAC;IACS,mDAAmB,GAA7B,UAA8B,GAAQ,EAAE,aAAyC;QAC7E,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAChE,CAAC;IACS,sDAAsB,GAAhC,UAAiC,GAAQ,EAAE,aAAyC;QAApF,iBAEC;QADG,OAAO,KAAG,GAAG,CAAC,GAAG,CAAC,UAAC,EAAO,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,GAAG,EAAE,aAAa,CAAC,EAAjD,CAAiD,CAAC,CAAC,IAAI,EAAI,CAAA;IAC9F,CAAC;IACS,qDAAqB,GAA/B,UAAgC,GAAQ,EAAE,aAAyC;QAC/E,IAAI,GAAG,CAAC,MAAM,EAAE;YACZ,mBAAmB;SACtB;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IACS,8CAAc,GAAxB,UAAyB,GAAQ,EAAE,aAAyC;QACxE,OAAO,GAAG,CAAC,GAAG,CAAC,UAAC,CAAM,IAAK,OAAA,kBAAgB,CAAC,CAAC,KAAK,YAAO,CAAC,CAAC,OAAS,EAAzC,CAAyC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpF,CAAC;IACS,8CAAc,GAAxB,UAAyB,GAAQ,EAAE,aAAyC;QACxE,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC;QAC7B,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IACS,4CAAY,GAAtB,UAAuB,GAAQ,EAAE,aAAyC;QACtE,OAAO,gBAAc,GAAG,CAAC,KAAO,CAAC;IACrC,CAAC;IACS,4CAAY,GAAtB,UAAuB,GAAQ,EAAE,aAAyC;QACtE,OAAO,GAAG,CAAC,GAAG,CAAC,UAAC,CAAS,IAAK,OAAA,gBAAc,CAAG,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/D,CAAC;IAES,kDAAkB,GAA5B,UAA6B,GAAQ,EAAE,aAAyC;QAC5E,IAAM,YAAY,GAEd;YACA,SAAS,EAAE,IAAI,CAAC,4BAA4B;YAC5C,UAAU,EAAE,IAAI,CAAC,6BAA6B;YAC9C,YAAY,EAAE,IAAI,CAAC,+BAA+B;YAClD,QAAQ,EAAE,IAAI,CAAC,2BAA2B;YAC1C,gBAAgB,EAAE,IAAI,CAAC,2BAA2B;YAClD,eAAe,EAAE,IAAI,CAAC,kCAAkC;YACxD,YAAY,EAAE,IAAI,CAAC,+BAA+B;YAClD,SAAS,EAAE,IAAI,CAAC,4BAA4B;SAC/C,CAAC;QACF,OAAO,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC3E,CAAC;IACS,4DAA4B,GAAtC,UAAuC,GAAQ,EAAE,aAAyC;QACtF,OAAO,iBAAe,IAAI,CAAC,WAAW,oBAAe,GAAG,CAAC,IAAI,MAAG;YAC5D,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IACS,6DAA6B,GAAvC,UAAwC,GAAQ,EAAE,aAAyC;QACvF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,OAAO,iBAAe,IAAI,CAAC,WAAW,qBAAgB,GAAG,CAAC,MAAQ,CAAC;IACvE,CAAC;IACS,+DAA+B,GAAzC,UAA0C,GAAQ,EAAE,aAAyC;QACzF,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,0BAAwB,GAAG,CAAC,MAAM,YAAO,GAAG,CAAC,OAAO,uBAAoB,CAAC,CAAC;SAC7F;QACD,OAAO,iBAAe,IAAI,CAAC,WAAW,sBAAiB,GAAG,CAAC,MAAM,MAAG;YAChE,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IACS,2DAA2B,GAArC,UAAsC,GAAQ,EAAE,aAAyC;QACrF,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAC,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;IACS,kEAAkC,GAA5C,UAA6C,GAAQ,EAAE,aAAyC;QAC5F,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAC,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,IAAI,EAAC,CAAC,CAAC,CAAC;IAC1F,CAAC;IACS,+DAA+B,GAAzC,UAA0C,GAAQ,EAAE,aAAyC;QACzF,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,EAAC,MAAM,EAAC,IAAI,EAAE,MAAM,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC;IAC1F,CAAC;IACS,4DAA4B,GAAtC,UAAuC,GAAQ,EAAE,aAAyC;QACtF,OAAO,gBAAc,GAAG,CAAC,KAAO,CAAC;IACrC,CAAC;IACS,0CAAU,GAApB,UAAqB,GAAQ,EAAE,aAAyC;QACpE,8BAA8B;QAC9B,IAAM,iBAAiB,GAAG,UAAC,GAAQ;YAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC1E,OAAO,WAAS,GAAG,CAAC,MAAM,MAAG,CAAC;aACjC;iBAAM;gBACH,OAAO,YAAU,GAAG,CAAC,MAAM,MAAG,CAAC;aAClC;QACL,CAAC,CAAC;QACF,IAAM,cAAc,GAAG,UAAC,GAAQ;YAC5B,IAAI,GAAG,CAAC,QAAQ,KAAK,SAAS,EAAE;gBAC5B,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,OAAO,OAAO,CAAC;aAClB;QACL,CAAC,CAAA;QACD,IAAM,WAAW,GAAqD;YAClE,kBAAkB,EAAE,cAAc;YAClC,sBAAsB,EAAE,SAAS;YACjC,yBAAyB,EAAE,SAAS;YACpC,cAAc,EAAE,MAAM;YACtB,kBAAkB,EAAE,MAAM;YAC1B,mBAAmB,EAAE,WAAW;YAChC,eAAe,EAAE,MAAM;YACvB,0BAA0B,EAAE,iBAAiB;YAC7C,uBAAuB,EAAE,iBAAiB;YAC1C,eAAe,EAAE,aAAa;YAC9B,cAAc,EAAE,SAAS;YACzB,kBAAkB,EAAE,SAAS;YAC7B,eAAe,EAAE,aAAa;SACjC,CAAC;QACF,IAAM,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,CAAC,EAAE;YACJ,MAAM,IAAI,KAAK,CAAC,4BAA0B,GAAG,CAAC,GAAG,CAAC,EAAI,CAAC,CAAC;SAC3D;aAAM,IAAI,OAAM,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;YACjC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC1C;aAAM;YACH,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IACD,sCAAsC;IAC5B,mDAAmB,GAA7B,UAA8B,IAAS,EAAE,aAAyC;QAAlF,iBAiBC;QAhBG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SACjB;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,UAAC,GAAQ;YACrB,IAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;YAClB,IAAI,CAAC,CAAC,QAAQ,KAAK,IAAI,EAAE;gBACrB,OAAO,EAAE,CAAC,CAAC,2FAA2F;aACzG;iBAAM,IAAI,CAAC,CAAC,QAAQ,KAAK,KAAK,EAAE;gBAC7B,OAAO,UAAU,CAAC;aACrB;iBAAM,IAAI,CAAC,CAAC,aAAa,EAAE;gBACxB,KAAI,CAAC,eAAe,CAAC,aAAa,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;aACjE;iBAAM,IAAI,CAAC,CAAC,OAAO,KAAK,SAAS,EAAE;gBAChC,KAAI,CAAC,eAAe,CAAC,aAAa,EAAE,SAAS,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACvF;YACD,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,UAAU;IACA,2DAA2B,GAArC,UAAsC,GAAQ,EAAE,aAAyC;QACrF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,OAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC,MAAG;aACzD,KAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,gBAAgB,EAAE,aAAa,CAAG,CAAA;YAClE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,WAAS,GAAG,CAAC,QAAQ,CAAC,KAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzF,CAAC;IACS,0DAA0B,GAApC;QACI,OAAO,kBAAgB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAG,CAAC;IAC9E,CAAC;IACS,sDAAsB,GAAhC;QAAA,iBAEC;QADG,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9E,CAAC;IACS,qDAAqB,GAA/B,UAAgC,GAAU;QACtC,OAAO,SAAS;YACR,CAAC,OAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC3C,KAAG;oBACC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;oBACtC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS;oBAC7C,OAAO;iBACV,CAAC,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;aACzC,MAAI,GAAG,CAAC,IAAI,MAAG,CAAA;aACf,QAAM,GAAG,CAAC,KAAK,SAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAG,CAAA,CAAC;IACvE,CAAC;IACS,2CAAW,GAArB,UAAsB,KAAU,EAAE,IAAe;QAC7C,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAQ;YACvC,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAC,CAAA;QACtD,CAAC,CAAC,CAAC;QACH,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC3E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1B,OAAO;YACH,IAAI,MAAA;YACJ,IAAI,MAAA;YACJ,KAAK,EAAE,IAAI,CAAC,WAAW;YACvB,OAAO,SAAA;SACV,CAAC;IACN,CAAC;IACS,+CAAe,GAAzB,UAA0B,KAAa,EAAE,OAAiB;QACtD,OAAU,KAAK,aAAQ,OAAO,CAAC,GAAG,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IAC1E,CAAC;IACS,kDAAkB,GAA5B,UAA6B,OAAiB;QAC1C,OAAO,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,CAAC,EAAH,CAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAG,EAA1D,CAA0D,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClG,CAAC;IACL,4BAAC;AAAD,CA1PA,AA0PC,IAAA;AA1PY,sDAAqB;AA0PjC,CAAC;AAEF,SAAgB,SAAS,CAAC,CAAwB;IAC9C,OAAO,IAAI,KAAK,CAAC,CAAC,EAAE;QAChB,GAAG,EAAE,UAAC,MAA6B,EAAE,IAA0B,EAAE,QAAa;YAC1E,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACrD,IAAI,OAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,EAAE;gBACjC,OAAO;oBAAU,cAAc;yBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;wBAAd,yBAAc;;oBAC3B,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;oBAC3D,OAAO,CAAC,GAAG,OAAX,OAAO,oBAAK,IAAI,GAAK,IAAI,GAAE;oBAC3B,OAAO,QAAQ,CAAC,IAAI,OAAb,QAAQ,oBAAM,QAAQ,GAAK,IAAI,GAAE;gBAC5C,CAAC,CAAA;aACJ;iBAAM;gBACH,OAAO,QAAQ,CAAC;aACnB;QACL,CAAC;KACJ,CAAC,CAAC;AACP,CAAC;AAfD,8BAeC","file":"SpannerDDLTransformer.js","sourcesContent":["import {\n    SpannerExtendSchemaSources,\n} from \"./SpannerRawTypes\";\n\ntype ASTTransformer = (ast: any, extendSchemas: SpannerExtendSchemaSources) => string;\ntype DataTypeChecker = (origType: string) => string;\n\ninterface ASTTransformerSet {\n    [operation: string]: ASTTransformer;\n}\n\ninterface Column {\n    name: string;\n    sort: string;\n};\ntype IndexType = {\n    unique: boolean;\n    sparse: boolean;\n} | string;\ninterface Index {\n    name: string;\n    type: IndexType;\n    table: string;\n    columns: Column[];\n};\n\nexport class SpannerDDLTransformer {\n    defaultValueEncoder: (value: any) => string;\n    scopedTable: string;\n    scopedColumn?: string;\n    scopedColumnType?: string;\n    scopedIndex?: string;\n    primaryKeyColumns: Column[];\n    indices: Index[];\n\n    constructor(defaultValueEncoder: (value: any) => string) {\n        this.defaultValueEncoder = defaultValueEncoder;\n        this.primaryKeyColumns = [];\n        this.indices = [];\n    }\n    transform(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        const set = <ASTTransformerSet><any>this;\n        return (set[ast.id] || set[\"transform\"]).call(this, ast.def, extendSchemas);\n    }\n    // common\n    protected addExtendSchema(extendSchemas: SpannerExtendSchemaSources, type: string, value: string) {\n        const key = this.scopedColumn || this.scopedIndex;\n        if (!key) {\n            throw new Error('scoped index or column should be set');\n        }\n        if (!extendSchemas[this.scopedTable]) {\n            extendSchemas[this.scopedTable] = {}\n        }\n        extendSchemas[this.scopedTable][key] = {\n            type, value\n        };\n    }\n    protected setScopedColumn(column: string) {\n        this.scopedIndex = undefined;\n        this.scopedColumn = column;\n    }\n    protected setScopedIndex(index: string) {\n        this.scopedIndex = `idx@${index}`;\n        this.scopedColumn = undefined;\n    }\n\n    // AST Transformers\n    // P_DDS: default\n    // P_CREATE_TABLE: default\n    protected P_CREATE_TABLE_COMMON(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        this.scopedTable = ast.table;\n        return `CREATE TABLE ${ast.table} ` +\n            `(${this.P_CREATE_TABLE_CREATE_DEFINITIONS(ast.columnsDef.def, extendSchemas)})` +\n            `${this.P_CREATE_TABLE_OPTIONS(ast.tableOptions.def, extendSchemas)} ` +\n            `${this.primaryKeyDefinitionHelper()};` +\n            `${this.indexDefinitionsHelper()}`;\n    }\n    protected P_CREATE_TABLE_CREATE_DEFINITIONS(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return `${ast.map((d: any) => this.P_CREATE_TABLE_CREATE_DEFINITION(d.def, extendSchemas)).filter((e: string) => !!e).join(',')}`;\n    }\n    protected P_CREATE_TABLE_CREATE_DEFINITION(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        if (ast.column) {\n            this.setScopedColumn(ast.column.name);\n            return `${ast.column.name} ${this.O_DATATYPE(ast.column.def.datatype, extendSchemas)} ` +\n                `${this.O_COLUMN_DEFINITION(ast.column.def.columnDefinition, extendSchemas)}`;\n        } else if (ast.primaryKey) {\n            this.primaryKeyColumns = this.primaryKeyColumns\n            .concat(ast.primaryKey.columns.map((c: any) => {\n                return {\n                    name: c.def.column,\n                    sort: c.def.sort\n                }\n            }));\n        } else if (ast.index) {\n            this.indices.push(this.indexHelper(ast.index, {unique:false, sparse:false}));\n        } else if (ast.uniqueKey) {\n            this.indices.push(this.indexHelper(ast.uniqueKey, {unique:true, sparse:false}));\n        }\n        return \"\";\n    }\n    protected P_ALTER_TABLE(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        this.scopedTable = ast.table;\n        return `${ast.specs.map((spec: any) => this.P_ALTER_TABLE_SPECS(spec, extendSchemas)).join(';')}`;\n    }\n    protected P_ALTER_TABLE_SPECS(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return this.O_ALTER_TABLE_SPEC(ast.def.spec, extendSchemas);\n    }\n    protected P_CREATE_TABLE_OPTIONS(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return `${ast.map((cd: any) => this.P_CREATE_TABLE_OPTION(cd.def, extendSchemas)).join()}`\n    }\n    protected P_CREATE_TABLE_OPTION(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        if (ast.engine) {\n            // InnoDB or MyISAM\n        }\n        return \"\";\n    }\n    protected P_RENAME_TABLE(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return ast.map((p: any) => `RENAME TABLE ${p.table} TO ${p.newName}`).join(';');\n    }\n    protected P_CREATE_INDEX(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        this.scopedTable = ast.table;\n        return this.indexDefinitionHelper(this.indexHelper(ast, ast.type));\n    }\n    protected P_DROP_INDEX(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return `DROP INDEX ${ast.index}`;\n    }\n    protected P_DROP_TABLE(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return ast.map((t: string) => `DROP TABLE ${t}`).join(';');\n    }\n\n    protected O_ALTER_TABLE_SPEC(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        const actionSqlMap: {\n            [action: string]: (ast: any, extendSchemas: SpannerExtendSchemaSources) => string\n        } = {\n            addColumn: this.O_ALTER_TABLE_SPEC_addColumn,\n            dropColumn: this.O_ALTER_TABLE_SPEC_dropColumn,\n            changeColumn: this.O_ALTER_TABLE_SPEC_changeColumn,\n            addIndex: this.O_ALTER_TABLE_SPEC_addIndex,\n            addFulltextIndex: this.O_ALTER_TABLE_SPEC_addIndex, //no fulltext index for spanner\n            addSpatialIndex: this.O_ALTER_TABLE_SPEC_addSpatialIndex,\n            addUniqueKey: this.O_ALTER_TABLE_SPEC_addUniqueKey,\n            dropIndex: this.O_ALTER_TABLE_SPEC_dropIndex,\n        };\n        return actionSqlMap[ast.def.action].call(this, ast.def, extendSchemas);\n    }\n    protected O_ALTER_TABLE_SPEC_addColumn(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return `ALTER TABLE ${this.scopedTable} ADD COLUMN ${ast.name} ` +\n            this.alterColumnDefinitionHelper(ast, extendSchemas);\n    }\n    protected O_ALTER_TABLE_SPEC_dropColumn(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        this.setScopedColumn(ast.column);\n        return `ALTER TABLE ${this.scopedTable} DROP COLUMN ${ast.column}`;\n    }\n    protected O_ALTER_TABLE_SPEC_changeColumn(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        if (ast.newName && ast.column !== ast.newName) {\n            throw new Error(`changing column name ${ast.column} => ${ast.newName} is not supported `);\n        }\n        return `ALTER TABLE ${this.scopedTable} ALTER COLUMN ${ast.column} ` +\n            this.alterColumnDefinitionHelper(ast, extendSchemas);\n    }\n    protected O_ALTER_TABLE_SPEC_addIndex(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return this.indexDefinitionHelper(this.indexHelper(ast, {unique:false, sparse:false}));\n    }\n    protected O_ALTER_TABLE_SPEC_addSpatialIndex(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return this.indexDefinitionHelper(this.indexHelper(ast, {unique:false, sparse:true}));\n    }\n    protected O_ALTER_TABLE_SPEC_addUniqueKey(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return this.indexDefinitionHelper(this.indexHelper(ast, {unique:true, sparse:false}));\n    }\n    protected O_ALTER_TABLE_SPEC_dropIndex(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        return `DROP INDEX ${ast.index}`;\n    }\n    protected O_DATATYPE(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        // handle all O_XXXXX_DATATYPE\n        const lengthTypeChecker = (ast: any) => {\n            if (ast.datatype.indexOf(\"blob\") >= 0 || ast.datatype.indexOf(\"binary\") >= 0) {\n                return `bytes(${ast.length})`;\n            } else {\n                return `string(${ast.length})`;\n            }\n        };\n        const intTypeChecker = (ast: any) => {\n            if (ast.datatype === 'tinyint') {\n                return \"bool\";\n            } else {\n                return \"int64\";\n            }\n        }\n        const dataTypeMap: { [id:string]:string|DataTypeChecker|undefined } = {\n            O_INTEGER_DATATYPE: intTypeChecker,\n            O_FIXED_POINT_DATATYPE: \"float64\",\n            O_FLOATING_POINT_DATATYPE: \"float64\",\n            O_BIT_DATATYPE: \"bool\",\n            O_BOOLEAN_DATATYPE: \"bool\",\n            O_DATETIME_DATATYPE: \"timestamp\",\n            O_YEAR_DATATYPE: \"date\",\n            O_VARIABLE_STRING_DATATYPE: lengthTypeChecker,\n            O_FIXED_STRING_DATATYPE: lengthTypeChecker,\n            O_ENUM_DATATYPE: \"string(max)\",\n            O_SET_DATATYPE: undefined,\n            O_SPATIAL_DATATYPE: undefined,\n            O_JSON_DATATYPE: \"string(max)\"\n        };\n        const t = dataTypeMap[ast.def.id];\n        if (!t) {\n            throw new Error(`unsupported data type: ${ast.def.id}`);\n        } else if (typeof(t) === \"function\") {\n            this.scopedColumnType = t(ast.def.def);\n        } else {\n            this.scopedColumnType = t;\n        }\n        return this.scopedColumnType;\n    }\n    // O_XXXXX_DATATYPE: default (ignored)\n    protected O_COLUMN_DEFINITION(asts: any, extendSchemas: SpannerExtendSchemaSources): string {\n        if (!Array.isArray(asts)) {\n            asts = [asts];\n        }\n        return asts.map((ast: any) => {\n            const a = ast.def;\n            if (a.nullable === true) {\n                return \"\"; //spanner does not allow `NULL` to express nullable column. all column nullable by default.\n            } else if (a.nullable === false) {\n                return \"NOT NULL\";\n            } else if (a.autoincrement) {\n                this.addExtendSchema(extendSchemas, \"generator\", \"increment\");\n            } else if (a.default !== undefined) {\n                this.addExtendSchema(extendSchemas, \"default\", this.defaultValueEncoder(a.default));\n            }\n            return \"\";\n        }).join(' ');\n    }\n\n    // helpers\n    protected alterColumnDefinitionHelper(ast: any, extendSchemas: SpannerExtendSchemaSources): string {\n        this.setScopedColumn(ast.column);\n        return `${this.O_DATATYPE(ast.datatype, extendSchemas)} ` +\n        `${this.O_COLUMN_DEFINITION(ast.columnDefinition, extendSchemas)}` +\n        (ast.position ? (ast.position.after ? `AFTER ${ast.position.after}` : \"FIRST\") : \"\");\n    }\n    protected primaryKeyDefinitionHelper(): string {\n        return `PRIMARY KEY (${this.indexColumnsHelper(this.primaryKeyColumns)})`;\n    }\n    protected indexDefinitionsHelper(): string {\n        return this.indices.map(idx => this.indexDefinitionHelper(idx)).join(';');\n    }\n    protected indexDefinitionHelper(idx: Index): string {\n        return `CREATE ` +\n                (typeof(idx.type) === \"string\" ? idx.type :\n                `${[\n                    idx.type.unique ? \"UNIQUE\" : undefined,\n                    idx.type.sparse ? \"NULL_FILTERED\" : undefined,\n                    \"INDEX\"\n                ].filter((e: string) => !!e).join(' ')}`) +\n                ` ${idx.name} ` +\n                `ON ${idx.table}(${this.indexColumnsHelper(idx.columns)})`;\n    }\n    protected indexHelper(index: any, type: IndexType): Index {\n        const columns = index.columns.map((idx: any) => {\n            return { name: idx.def.column, sort: idx.def.sort}\n        });\n        const name = index.name || this.indexNameHelper(this.scopedTable, columns);\n        this.setScopedIndex(name);\n        return {\n            name,\n            type,\n            table: this.scopedTable,\n            columns\n        };\n    }\n    protected indexNameHelper(table: string, columns: Column[]): string {\n        return `${table}_idx_${columns.map((c: Column) => c.name).join('_')}`;\n    }\n    protected indexColumnsHelper(columns: Column[]): string {\n        return columns.map(c => `${[c.name, c.sort].filter((e: string) => !!e).join(' ')}`).join(',');\n    }\n};\n\nexport function MakeDebug(t: SpannerDDLTransformer): SpannerDDLTransformer {\n    return new Proxy(t, {\n        get: (target: SpannerDDLTransformer, prop: string|number|symbol, receiver: any): any => {\n            const origProp = Reflect.get(target, prop, receiver);\n            if (typeof(origProp) === 'function') {\n                return function (...args: any[]) {\n                    console.log('-------------------------------------------');\n                    console.log(prop, ...args);\n                    return origProp.call(receiver, ...args);\n                }\n            } else {\n                return origProp;\n            }\n        }\n    });\n}\n"],"sourceRoot":"../.."}