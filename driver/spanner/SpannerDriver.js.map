{"version":3,"sources":["../../src/driver/spanner/SpannerDriver.ts"],"names":[],"mappings":"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","file":"SpannerDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {SpannerConnectionOptions} from \"./SpannerConnectionOptions\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SpannerQueryRunner} from \"./SpannerQueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableOptions} from \"../../schema-builder/options/TableOptions\";\nimport {TableColumnOptions} from \"../../schema-builder/options/TableColumnOptions\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {TableForeignKeyOptions} from \"../../schema-builder/options/TableForeignKeyOptions\";\nimport {TableUniqueOptions} from \"../../schema-builder/options/TableUniqueOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {SpannerDatabase, SpannerExtendSchemas} from \"./SpannerRawTypes\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ValueTransformer} from \"../../decorator/options/ValueTransformer\";\nimport {SpannerUtil} from \"./SpannerUtil\";\nimport * as Long from \"long\";\nif (process.env.PRELOAD_SPANNER_DEPENDENCY) {\n    require('@google-cloud/spanner');\n    require('sql-ddl-to-json-schema');\n}\n\n//import { filter } from \"minimatch\";\n\n\nexport const SpannerColumnUpdateWithCommitTimestamp = \"commit_timestamp\";\n\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class SpannerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Spanner underlying library.\n     */\n    spannerLib: any;\n    spanner: {\n        client: any;\n        instance: any;\n        database: SpannerDatabase;\n    } | null;\n\n    /**\n     * because spanner's schema change cannot be done transactionally, \n     * we ignore start/commit/rollback Transaction during schema change phase\n     */\n    enableTransaction: boolean;\n\n    /**\n     * ddl parser to use mysql migrations as spanner ddl. \n     * https://github.com/duartealexf/sql-ddl-to-json-schema\n     */\n    ddlParser: any;\n\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SpannerConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/5.7/en/data-types.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"int64\",\n        \"bytes\",\n        \"bool\",\n        \"date\",\n        \"float64\",\n        \"string\",\n        \"timestamp\",\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"bytes\",\n        \"string\",\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withWidthColumnTypes: ColumnType[] = [\n        \"bytes\",\n        \"string\",\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"float64\",\n    ];\n\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"float64\",\n    ];\n\n    /**\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n     */\n    unsignedAndZerofillTypes: ColumnType[] = [\n    ];\n\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDatePrecision: 20,\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        updateDate: \"timestamp\",\n        updateDatePrecision: 20,\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n        version: \"int64\",\n        treeLevel: \"int64\",\n        migrationId: \"string\",\n        migrationName: \"string\",\n        migrationTimestamp: \"timestamp\",\n        cacheId: \"string\",\n        cacheIdentifier: \"string\",\n        cacheTime: \"int64\",\n        cacheDuration: \"int64\",\n        cacheQuery: \"string\",\n        cacheResult: \"string\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"string\": { length: 255 },\n        \"bytes\": { length: 255 },\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SpannerConnectionOptions;\n        this.enableTransaction = false;\n\n        // load mysql package\n        this.loadDependencies();\n\n    }\n\n    // -------------------------------------------------------------------------\n    // static Public Methods (SpannerDriver specific)\n    // -------------------------------------------------------------------------\n    static updateTableWithExtendSchema(\n        db: SpannerDatabase, \n        extendSchemas: SpannerExtendSchemas, \n        ignoreColumnNotFound: boolean\n    ) {\n        db.schemas = extendSchemas;\n        for (const tableName in db.tables) {\n            const table = db.tables[tableName];\n            const extendSchema = extendSchemas[tableName];\n            if (extendSchema) {\n                for (const columnName in extendSchema) {\n                    const columnSchema = extendSchema[columnName];\n                    const column = table.findColumnByName(columnName);\n                    if (column) {\n                        column.isGenerated = !!columnSchema.generator;\n                        column.default = columnSchema.default;\n                        column.generationStrategy = columnSchema.generatorStorategy;\n                    } else if (!ignoreColumnNotFound) {\n                        throw new Error(`extendSchema for column ${columnName} exists but table does not have it`);\n                    }\n                }\n            } else {\n                // console.log('extendSchema for ', tableName, 'does not exists', extendSchemas);\n            }\n            // console.log('table', tableName, table);\n        }\n    }\n    static randomInt64(): string {\n        const bytes = SpannerUtil.randomBytes(8);\n        const as_numbers: number[] = [];\n        // TODO: is there any better(faster) way? \n        for (const b of bytes) {\n            as_numbers.push(b);\n        }\n        return Long.fromBytes(as_numbers, true).toString();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods (SpannerDriver specific)\n    // -------------------------------------------------------------------------\n    /**\n     * returns spanner database object. used as databaseConnection of query runner.\n     */\n    async getDatabaseHandle(): Promise<any> {\n        if (!this.spanner) {\n            await this.connect();\n            if (!this.spanner) {\n                throw new Error('fail to reconnect');\n            }\n        }\n        return this.spanner.database.handle;\n    }\n    async getAllTablesForDrop(force?:boolean): Promise<{[name:string]:Table}> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        this.spanner.database.tables = {}\n        await this.loadTables(this.getSchemaTableName());\n        return this.spanner.database.tables;\n    }\n    // get list of table names which has actual Table but not metadata. \n    // (eg. migrations)\n    systemTableNames(): string[] {\n        return [\n            this.options.migrationsTableName || \"migrations\",\n            \"query-result-cache\"\n        ];\n    }\n    // get list of tables which has actual Table but not metadata. \n    // (eg. migrations)\n    async getSystemTables(): Promise<Table[]> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        const db = this.spanner.database;\n        await this.loadTables(this.getSchemaTableName());\n        return this.systemTableNames()\n            .map((name) => db.tables[name])\n            .filter((t) => !!t);\n    }\n    getExtendSchemas(): SpannerExtendSchemas {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        return this.spanner.database.schemas || {};\n    }\n    /**\n     * create and drop database of arbiter name. \n     * if name equals this.options.database, change driver state accordingly\n     */\n    createDatabase(name: string): Promise<any> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        if (name == this.options.database) {\n            return Promise.resolve(this.spanner.database.handle);\n        }\n        return this.spanner.instance.database(name).get({autoCreate:true});\n    }\n    dropDatabase(name: string): Promise<void> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        if (name == this.options.database) {\n            return this.spanner.database.handle.delete.then(() => {\n                this.disconnect();\n            });\n        }\n        return this.spanner.instance.database(name).delete();\n    }\n    /**\n     * set tables object cache. \n     */\n    setTable(table: Table) {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        this.spanner.database.tables[table.name] = table;\n        // if system table is updated, setup extend schemas again.\n        if (this.systemTableNames().indexOf(table.name) !== -1) {\n            this.setupExtendSchemas(this.spanner.database, false);\n        }\n    }\n    async dropTable(tableName: string): Promise<void> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        const t = this.spanner.database.tables[tableName];\n        if (t) {\n            console.log(`deleting table[${tableName}]...`);\n            await this.spanner.database.handle.table(tableName)\n            .delete()\n            .then((data: any) => {\n                // need to wait until table deletion\n                return data[0].promise();\n            })\n            .then(() => {\n                if (this.spanner) {\n                    delete this.spanner.database.tables[tableName];\n                    if (this.getSchemaTableName() == tableName) {\n                        this.spanner.database.schemas = null;\n                    }\n                }        \n            });\n            console.log(`deleted table[${tableName}]`);\n        } else {\n            console.log(`deleting table[${tableName}]`, 'not exists', this.spanner.database.tables);\n        }\n    }\n    /**\n     * load tables. cache them into this.spanner.databases too.\n     * @param tableNames table names which need to load. \n     */\n    loadTables(tableNames: string[]|Table|string): Promise<Table[]> {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        if (typeof tableNames === 'string') {\n            tableNames = [tableNames];\n        } else if (tableNames instanceof Table) {\n            tableNames = [tableNames.name];\n        }\n        const database = this.spanner.database;\n        return (async () => {        \n            const tables = await Promise.all(tableNames.map(async (tableName: string) => {\n                let [dbname, name] = tableName.split(\".\");\n                if (!name) {\n                    name = dbname;\n                }\n                if (Object.keys(database.tables).length === 0) {\n                    const handle = database.handle;\n                    const schemas = await handle.getSchema();\n                    database.tables = await this.parseSchema(schemas);\n                }\n                return database.tables[name];\n            }));\n            return tables.filter((t) => !!t);\n        })();\n    }\n    getDatabases(): string[] {\n        return Object.keys([this.options.database]);\n    }\n    isSchemaTable(table: Table): boolean {\n        return this.getSchemaTableName() === table.name;\n    }\n    getSchemaTableName(): string {\n        return this.options.schemaTableName || \"schemas\";\n    }\n    getTableEntityMetadata(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\");\n    }\n    autoGenerateValue(tableName: string, columnName: string): any {\n        if (!this.spanner) {\n            throw new Error('connect() driver first');\n        }\n        const database = this.spanner.database;\n        if (!database.schemas || \n            !database.schemas[tableName] || \n            !database.schemas[tableName][columnName]) {\n            return undefined;\n        }\n        const generator = database.schemas[tableName][columnName].generator;\n        if (!generator) {\n            return undefined;\n        }\n        return generator();\n    }\n    encodeDefaultValueGenerator(value: any): string {\n        const defaultValue = typeof(value) === 'function' ? value() : value;\n        if (defaultValue === this.mappedDataTypes.createDateDefault) {\n            return defaultValue;\n        } else {\n            return JSON.stringify(defaultValue);\n        }\n    }\n    decodeDefaultValueGenerator(value: string): () => any {\n        if (value === this.mappedDataTypes.createDateDefault) {\n            return () => new Date();\n        } else {\n            const parsedDefault = JSON.parse(value);\n            return () => parsedDefault;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        if (!this.spanner) {\n\t\t\tconst Spanner = this.spannerLib.Spanner;\n            // create objects\n            const client = new Spanner({\n                projectId: this.options.projectId,\n            });\n            const instance = client.instance(this.options.instanceId);\n            const database = instance.database(this.options.database, this.options.sessonPool);\n            await database.get({autoCreate: true});\n            this.spanner = {\n                client, instance,\n                database: {\n                    handle: database,\n                    tables: {},\n                    schemas: null,\n                }\n            };\n            //actual database creation done in createDatabase (called from SpannerQueryRunner)\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     * here update extend schema. \n     */\n    afterConnect(): Promise<void> {\n        return (async () => {\n            if (!this.spanner) {\n                throw new Error('connect() driver first');\n            }\n            // TODO: translate\n            // synchronizeはspannerに可能なスキーマの変更だけを行い、\n            // generationStorategyやdefaultなどは変更することができず、\n            // schemasテーブルを更新する必要がある。\n            // また、this.spanner.database.tablesはschemasテーブルの情報をマージした状態で\n            // synchronizeに入る必要があるため、ここでsetupExtendSchemasする。\n            // そうしない場合、synchronizeでそれ関連の属性で差分が出てしまい、\n            // 結果的にalterでは変更できない属性(defaultやgenerationStorategy)を変更しようとして\n            // エラーになるため。ただしdropSchemaする場合には直後に削除されてしまい無駄なのでafterBootStepで行う\n            if (!this.options.dropSchema) {\n                await this.setupExtendSchemas(this.spanner.database, false);\n            }\n        })();\n    }\n\n    /**\n     * Makes any action after any synchronization happens (e.g. sync extend schema table in Spanner driver)\n     */\n    afterBootStep(event: \"DROP_DATABASE\"|\"RUN_MIGRATION\"|\"SYNCHRONIZE\"|\"FINISH\"): Promise<void> {\n        return (async () => {\n            if (!this.spanner) {\n                throw new Error('connect() driver first');\n            }\n            switch (event) {\n            case \"DROP_DATABASE\":\n                await this.setupExtendSchemas(this.spanner.database, false);\n                break;\n            case \"RUN_MIGRATION\":\n                break;\n            case \"SYNCHRONIZE\":\n                break;\n            case \"FINISH\":\n                await this.setupExtendSchemas(this.spanner.database, true);\n                this.enableTransaction = true;\n                break;\n            }\n        })();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        this.spanner = null;\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\n        return new SpannerQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        // written values (for update) are likely to put in nativeParameter\n        // OTOH read values (for select, update, delete) are likely to put in parameter. \n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, [nativeParameters]];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let paramName: string;\n            let placeHolder: string;\n            if (key.substr(0, 4) === \":...\") {\n                paramName = key.substr(4);\n                placeHolder = `UNNEST(@${paramName})`;\n            } else {\n                paramName = key.substr(1);\n                placeHolder = `@${paramName}`;\n            }\n            value = parameters[paramName];\n\n            if (value instanceof Function) {\n                return value();\n\n            } else {\n                return placeHolder;\n            }\n        // IN (UNNEST(@val)) causes error\n        }).replace(/\\s+IN\\s+\\(([^)]+)\\)/g, (key: string, p1: string) => {\n            return ` IN ${p1}`;\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, [parameters]];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return \"`\" + columnName + \"`\";\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     * but spanner does not allow to prefix database name, we just returns table name.\n     */\n    buildTableName(tableName: string, schema?: string, database?: string): string {\n        return tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        return this.normalizeValue(value, this.normalizeType({type:columnMetadata.type}), columnMetadata.transformer);\n    }\n    normalizeValue(value: any, type: any, transformer?: ValueTransformer): any {\n        if (transformer)\n            value = transformer.to(value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (type === \"timestamp\" || \n            type === \"date\" || \n            type === Date) {\n            if (typeof(value) === 'number') {\n                // convert millisecond numeric timestamp to date object. \n                // because @google/spanner does not accept it\n                return new Date(value); \n            }\n            return DateUtils.mixedDateToDate(value);\n\n        } /*else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        } */ else if (\n            type == Number ||\n            type == String || \n            type == Boolean ||\n            type == \"int64\" ||\n            type == \"float64\" ||\n            type == \"bool\" ||\n            type == \"string\" ||\n            type == \"bytes\") {\n            return value;\n        } else if (\n            type == \"uuid\"\n        ) {\n            return value.toString();\n        }\n\n        throw new Error(`spanner driver does not support '${type}' column type`);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        try {\n            return this.preparePersistentValue(value, columnMetadata);\n        } catch (e) {\n            if (columnMetadata.transformer)\n                return columnMetadata.transformer.from(value);\n            throw e;\n        }\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type: ColumnType, length?: number|string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type.toString().indexOf(\"int\") !== -1) {\n            return \"int64\";\n\n        } else if (column.type.toString().indexOf(\"float\") !== -1 ||\n            column.type.toString().indexOf(\"double\") !== -1 ||\n            column.type.toString().indexOf(\"dec\") !== -1) {\n            return \"float64\";\n        }\n        else if (column.type === String || \n            column.type.toString().indexOf(\"char\") !== -1 ||\n            column.type.toString().indexOf(\"text\") !== -1) {\n            return \"string\";\n\n        } else if (column.type === Date ||\n            column.type.toString().indexOf(\"time\") !== -1) {\n            return \"timestamp\";\n\n        } else if ((column.type as any) === Buffer || (column.type as any) === Uint8Array ||\n            column.type.toString().indexOf(\"binary\") !== -1 ||\n            column.type.toString().indexOf(\"blob\") !== -1 ||\n            column.type.toString().indexOf(\"char\") !== -1) {\n            return \"bytes\";\n\n        } else if (column.type === Boolean ||\n            column.type === \"bit\") {\n            return \"bool\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\" || column.type === \"uuid\") {\n            return \"string\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (columnMetadata.isUpdateDate) {\n            return SpannerColumnUpdateWithCommitTimestamp;\n\n        } else if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        switch (column.type) {\n            case String:\n            case \"string\":\n                return \"255\";\n            case \"bytes\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if ((<string[]>this.withWidthColumnTypes).indexOf(type) >= 0 && column.width) {\n            type += `(${column.width})`;\n\n        } else if ((<string[]>this.withPrecisionColumnTypes).indexOf(type) >= 0) {\n            if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n                type += `(${column.precision},${column.scale})`;\n\n            } else if (column.precision !== null && column.precision !== undefined) {\n                type += `(${column.precision})`;\n            }\n        }\n\n        if (column.isArray)\n            type = `Array<${type}>`;\n\n        //console.log('createFullType', type, column);\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.spanner) {\n            throw new Error(`no active database`);\n        }\n        return Promise.resolve(this.spanner.database.handle);\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any): ObjectLiteral|undefined {\n        return insertResult;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        //console.log('columns', tableColumns);\n        const filtered = columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            /* console.log(\"changed property ==========================================\");\n            console.log(\"table.column:\", columnMetadata.entityMetadata.tableName, columnMetadata.databaseName);\n            if (tableColumn.name !== columnMetadata.databaseName)\n                console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            if (tableColumn.type.toLowerCase() !== this.normalizeType(columnMetadata).toLowerCase())\n                console.log(\"type:\", tableColumn.type.toLowerCase(), this.normalizeType(columnMetadata).toLowerCase());\n            if (tableColumn.length !== columnMetadata.length)\n               console.log(\"length:\", tableColumn.length, columnMetadata.length.toString());\n            if (tableColumn.width !== columnMetadata.width)\n               console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // if (tableColumn.precision !== columnMetadata.precision)\n               // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            if (tableColumn.scale !== columnMetadata.scale)\n               console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            if (tableColumn.zerofill !== columnMetadata.zerofill)\n               console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            if (tableColumn.unsigned !== columnMetadata.unsigned)\n               console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            if (tableColumn.asExpression !== columnMetadata.asExpression)\n               console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            if (tableColumn.generatedType !== columnMetadata.generatedType)\n               console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // if (tableColumn.comment !== columnMetadata.comment)\n               // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            if (tableColumn.default !== columnMetadata.default)\n               console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            if (!this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default))\n               console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            if (tableColumn.onUpdate !== columnMetadata.onUpdate)\n               console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            if (tableColumn.isPrimary !== columnMetadata.isPrimary)\n               console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            if (tableColumn.isNullable !== columnMetadata.isNullable)\n               console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            if (tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata))\n               console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            if (tableColumn.isGenerated !== columnMetadata.isGenerated)\n               console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            console.log(\"==========================================\"); */\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type.toLowerCase() !== this.normalizeType(columnMetadata).toLowerCase() \n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.width !== columnMetadata.width\n                // || tableColumn.precision !== columnMetadata.precision : spanner has no precision specifier\n                || tableColumn.scale !== columnMetadata.scale\n                || tableColumn.zerofill !== columnMetadata.zerofill\n                || tableColumn.unsigned !== columnMetadata.unsigned\n                || tableColumn.asExpression !== columnMetadata.asExpression\n                || tableColumn.generatedType !== columnMetadata.generatedType\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n\n        //console.log('filtered', filtered);\n        return filtered;\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     * for Spanner, no auto assigned value (default/generatedStorategy(uuid, increment)) at database side. \n     * every such values are defined in client memory, so just return insertValue. \n     */\n    isReturningSqlSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return `@${parameterName}`;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.spannerLib = PlatformTools.load('@google-cloud/spanner');  // try to load first supported package\n            if (this.options.migrationDDLType) {\n                const parser = PlatformTools.load('sql-ddl-to-json-schema');\n                this.ddlParser = new parser(this.options.migrationDDLType);\n            } else {\n                this.ddlParser = undefined;\n            }\n            /*\n             * Some frameworks (such as Jest) may mess up Node's require cache and provide garbage for the 'mysql' module\n             * if it was not installed. We check that the object we got actually contains something otherwise we treat\n             * it as if the `require` call failed.\n             *\n             * @see https://github.com/typeorm/typeorm/issues/1373\n             */\n            [this.spannerLib, this.ddlParser].map((lib) => {\n                if (lib && Object.keys(lib).length === 0) {\n                    throw new Error(\"dependency was found but it is empty.\");\n                }\n            });\n\n        } catch (e) {\n            console.log(e);\n            throw new DriverPackageNotInstalledError(\"Spanner\", \"@google-cloud/spanner\");\n        }\n    }\n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        return columnMetadataValue === databaseValue;\n    }\n\n    /**\n     * parse typename and return additional information required by TableColumn object.\n     */\n    protected parseTypeName(typeName: string): {\n        typeName: string;\n        isArray: boolean;\n        length?: string;\n    } {\n        typeName = typeName.toLowerCase();\n        const tm = typeName.match(/([^\\(]+)\\((\\d+)\\)/);\n        if (tm) {\n            const typeDefault = this.dataTypeDefaults[tm[1]];\n            return {\n                typeName: tm[1],\n                isArray: false,\n                length: typeDefault && typeDefault.length && \n                    tm[2] == typeDefault.length.toString() ? undefined : tm[2]\n            };\n        } \n        const am = typeName.match(/([^<]+)<(\\w+)>/);\n        if (am) {\n            return {\n                typeName,\n                isArray: true,\n            }\n        }\n        return {\n            typeName,\n            isArray: false,\n        }\n    }\n\n     /**\n     * parse output of database.getSchema to generate Table object\n     */\n    protected async parseSchema(schemas: any): Promise<{[tableName: string]: Table}> {\n        this.connection.logger.log(\"info\", schemas);\n        const tableOptionsMap: {[tableName: string]: TableOptions} = {};\n        for (const stmt of schemas[0]) {\n            // console.log('stmt', stmt);\n            // stmt =~ /CREATE ${tableName} (IF NOT EXISTS) (${columns}) ${interleaves}/\n            /* example. \n            CREATE TABLE migrations (\n                id STRING(255) NOT NULL,\n                timestamp TIMESTAMP NOT NULL,\n                name STRING(255) NOT NULL,\n            ) PRIMARY KEY(id)\n\n            CREATE INDEX IDX_908fdaa14b12b506f5c2371001 ON Item(ownerId, item_id)\n\n            in below regex, ,(?=\\s*\\)) is matched `,\\n)` just before PRIMARY KEY\n            */\n\n           // variable for storing parse results\n           const indices: TableIndexOptions[] = [];\n           const foreignKeys: TableForeignKeyOptions[] = [];\n           const uniques: TableUniqueOptions[] = [];\n           const columns: TableColumnOptions[] = [];\n\n           const m = stmt.match(/\\s*CREATE\\s+TABLE\\s+(\\w+)\\s?[^\\(]*\\(([\\s\\S]*?),(?=\\s*\\))\\s*\\)([\\s\\S]*)/);\n            if (!m) {\n                // idxStmt =~ CREATE (UNIQUE|NULL_FILTERED) INDEX ${name} ON ${tableName}(${columns}) (INTERLEAVE IN ${parentTableName})\n                const im = stmt.match(/(\\w[\\w\\s]+?)\\s+INDEX\\s+(\\w+)\\s+ON\\s+(\\w+)\\s*\\(([^)]+)\\)(.*)/);\n                if (im) {\n                    //console.log('process as index', im);\n                    if (im[5] && im[5].indexOf(\"INTERLEAVE\") >= 0) {\n                        // interleaved index. this seems to be same as `partially interleaved table`.\n                        // we use interleaved table for relation, difficult to use this feature\n                        // because no way to specify interleaved table from @Index annotation.\n                        // one hack is use where property of IndexOptions to specify table name.\n                        throw new Error('TODO: spanner: interleaved index support');\n                    } else {\n                        // normal index\n                        const tableIndexOptions = {\n                            name: im[2],\n                            columnNames: im[4].split(\",\").map((e: string) => e.trim()),\n                            isUnique: im[1].indexOf(\"UNIQUE\") >= 0,\n                            isSpatial: im[1].indexOf(\"NULL_FILTERED\") >= 0,\n                            isFulltext: false\n                        };\n                        const tableOptions = tableOptionsMap[im[3]];\n                        if (tableOptions) {\n                            tableOptions.indices = tableOptions.indices || [];\n                            tableOptions.indices.push(tableIndexOptions);\n                            if (tableIndexOptions.isUnique) {\n                                tableOptions.uniques = tableOptions.uniques || [];\n                                tableOptions.columns = tableOptions.columns || [];\n                                tableOptions.uniques.push({\n                                    name: tableIndexOptions.name,\n                                    columnNames: tableIndexOptions.columnNames\n                                });\n                                for (const uniqueColumnName of tableIndexOptions.columnNames) {\n                                    const options = tableOptions.columns.find(c => c.name == uniqueColumnName);\n                                    if (options) {\n                                        options.isUnique = true;\n                                    } else {\n                                        throw new Error(`unique columns should exists in table ${im[3]} <= ${uniqueColumnName}`);\n                                    }\n                                }\n                            }\n                        } else {\n                            throw new Error(`index ddl appears before main table ddl: ${im[3]}`);\n                        }\n                    }\n                    continue;\n                } else {\n                    throw new Error(\"invalid ddl format:\" + stmt);\n                }\n            }\n            const tableName: string = m[1]; \n            const columnStmts: string = m[2];\n            const indexStmts: string = m[3];\n            // parse columns\n            for (const columnStmt of columnStmts.split(',')) {\n                // console.log('columnStmt', `[${columnStmt}]`);\n                const cm = columnStmt.match(/(\\w+)\\s+([\\w\\(\\)]+)\\s*([^\\n]*)/);\n                if (!cm) {\n                    throw new Error(\"invalid ddl column format:\" + columnStmt);\n                }\n                const type = this.parseTypeName(cm[2]);\n                // check and store constraint with m[3]\n                columns.push({\n                    name: cm[1],\n                    type: type.typeName,\n                    isNullable: cm[3].indexOf(\"NOT NULL\") < 0,\n                    isGenerated: false, // set in updateTableWithExtendSchema\n                    isPrimary: false, // set afterwards\n                    isUnique: false, // set afterwards\n                    isArray: type.isArray,\n                    length: type.length ? type.length : undefined, \n                    default: undefined, // set in updateTableWithExtendSchema\n                    generationStrategy: undefined, // set in updateTableWithExtendSchema\n                });\n            }\n            // parse primary and interleave statements\n            // probably tweak required (need to see actual index/interleave statements format)\n            if (indexStmts == null) {\n                continue;\n            }\n            for (const idxStmt of (indexStmts.match(/(\\w+[\\w\\s]+\\([^)]+\\)[^,]*)/g) || [])) {\n                // console.log('idxStmt', idxStmt);\n                // distinguish index and foreignKey. fk should contains INTERLEAVE\n                if (idxStmt.indexOf(\"INTERLEAVE\") == 0) {\n                    // foreighkey\n                    // idxStmt =~ INTERLEAVE IN PARENT ${this.escapeTableName(fk.referencedTableName)}\n                    const im = idxStmt.match(/INTERLEAVE\\s+IN\\s+PARENT\\s+(\\w+)/);\n                    if (im) {\n                        foreignKeys.push({\n                            name: tableName,\n                            columnNames: [`${m[2]}_id`],\n                            referencedTableName: im[1],\n                            referencedColumnNames: [] // set afterwards (primary key column of referencedTable)\n                        });\n                    } else {\n                        throw new Error(\"invalid ddl interleave format:\" + idxStmt);\n                    }\n                } else if (idxStmt.indexOf(\"PRIMARY\") == 0) {\n                    // primary key\n                    // idxStmt =~ PRIMARY KEY (${columns})\n                    const pm = idxStmt.match(/PRIMARY\\s+KEY\\s*\\(([^)]+)\\)/);\n                    if (pm) {\n                        for (const primaryColumnName of pm[1].split(',').map(e => e.trim())) {\n                            const options = columns.find(c => c.name == primaryColumnName);\n                            if (options) {\n                                options.isPrimary = true;\n                            }\n                        }\n                    } else {\n                        throw new Error(\"invalid ddl pkey format:\" + idxStmt);\n                    }\n                }\n            }\n            tableOptionsMap[tableName] = {\n                name: tableName,\n                columns,\n                indices,\n                foreignKeys,\n                uniques\n            };\n        }\n        const result: { [tableName:string]: Table } = {};\n        for (const tableName in tableOptionsMap) {\n            // console.log('tableOptions', tableName, tableOptionsMap[tableName]);\n            result[tableName] = new Table(tableOptionsMap[tableName]);\n        }\n        return result;\n    }\n\n    protected async setupExtendSchemas(db: SpannerDatabase, afterSync: boolean) {\n        const maybeSchemaChange = this.options.dropSchema || this.options.synchronize || this.options.migrationsRun\n        const queryRunner = this.createQueryRunner(\"master\");\n        // path1: recover previous extend schema stored in database\n        const extendSchemas = await queryRunner.createAndLoadSchemaTable(\n            this.getSchemaTableName()\n        );\n        const ignoreColumnNotFound = !afterSync;\n        if (maybeSchemaChange && afterSync) {\n            const database = this.spanner!.database;\n            const handle = database.handle;\n            const schemas = await handle.getSchema();\n            database.tables = await this.parseSchema(schemas);\n        }\n        SpannerDriver.updateTableWithExtendSchema(db, extendSchemas, ignoreColumnNotFound);\n\n        // path2: fill the difference from schema which is defined in code, if schema may change\n        if (maybeSchemaChange) {\n            const newExtendSchemas = await queryRunner.syncExtendSchemas(\n                this.getTableEntityMetadata()\n            )\n            SpannerDriver.updateTableWithExtendSchema(db, newExtendSchemas, ignoreColumnNotFound);\n        }\n    }\n}\n"],"sourceRoot":"../.."}